-- import: fastn

-- fastn.package: lets-auth.fifthtry.site
system: lets-auth
system-is-confidential: false

-- fastn.dependency: design-system.fifthtry.site

;; this is a system: alias must be ds
-- fastn.auto-import: design-system.fifthtry.site as ds
-- fastn.auto-import: lets-auth.fifthtry.site as lets-auth
-- fastn.auto-import: lets-auth.fifthtry.site/assets


-- fastn.migration: 0002-add-folder-and-folder-users


;; how to think about permission.
;;
;; first there is a graph, a directed acyclic graph to be more precise, or multi
;; parent tree. we will call the nodes folders, and graph will be called folder
;; tree. for every site there is one such folder tree.
;;
;; all users are part of the folder tree (can be added to one or more folders)
;;
;; all objects are part of the folder tree (can be added to one or more folders)
;;
;; all permissions are part of the folder tree (can be added ...). all
;; permissions for a given app/object combination, the permissions are sortable,
;; so if you ask for a permission, if you have a higher permission, you are
;; assumed to have lower permissions too.
;;
;; there is also a user permission table, which stores direct permission user
;; has on any object. this is to be used if you are directly granting some
;; specific permission on some object to some specific user, and do not want to
;; use the folder tree based permissions. this is because some times we want to
;; do adhoc permissions, and forcing people to always create folders, especially
;; if they are adhoc with no logical meaning, it feels cumbersome etc, and
;; people may not like it.
;;
;; question: how do i know if a user has permission to do something?
;;
;; first check if user permission table directly grants you enough permission.
;; if not, find all the paths from the object to the root. for each each path,
;; p1, p2 etc, find the highest permission user has on that path (user only has
;; permission of a folder at same level as the folder or below where they are
;; added). stop when first path returns high enough permission.


\-- semantics: this table is used to store the folders
CREATE TABLE IF NOT EXISTS fastn_folder
(
    id           INTEGER PRIMARY KEY,
    guid         TEXT NOT NULL UNIQUE,
    name         TEXT NOT NULL,
    is_exception INTEGER DEFAULT false, -- see fastn_folder_exception_permission for more context

    created_at   INTEGER NOT NULL,
    updated_at   INTEGER NOT NULL
) STRICT;

\-- semantics: this table is used to store the users in a folder
CREATE TABLE IF NOT EXISTS fastn_folder_user (
    id             INTEGER PRIMARY KEY,
    fguid          TEXT NOT NULL,
    uid            INTEGER NOT NULL,

    created_at   INTEGER NOT NULL,
    updated_at   INTEGER NOT NULL,

    FOREIGN KEY (fguid) REFERENCES fastn_folder (guid),
    FOREIGN KEY (uid) REFERENCES fastn_user (id)
) STRICT;

\-- this table is used to store roles of a user in a folder
\-- normally permission should be managed by fastn_permission table, but the
\-- role can be used to decide what permissions you have on a given folder.
\-- possible values of role: member, admin, owner. owner can remove anyone, but
\-- only other owner can remove an owner. only admin can remove a member, or
\-- another admin.
\-- semantics: people in this folder have these permissions on any object in
\-- this folder. this will also contain the permissions for the folder itself,
\-- e.g., if you can see the folder.
CREATE TABLE IF NOT EXISTS fastn_folder_permission
(
    id             INTEGER PRIMARY KEY,
    fguid          TEXT NOT NULL,
    permission     INTEGER NOT NULL,

    valid_since    INTEGER NOT NULL, -- usually the time of creation
    valid_till     INTEGER NULL,     -- if null, permission is valid forever
    two_factor     INTEGER NOT NULL DEFAULT false, -- if true, user must use 2FA

    created_at   INTEGER NOT NULL,
    updated_at   INTEGER NOT NULL,

    FOREIGN KEY (fguid) REFERENCES fastn_folder (guid),
    FOREIGN KEY (permission) REFERENCES fastn_app_permission (id)
) STRICT;



\-- semantics: this table is used to store the relation between folders
;; CREATE TABLE IF NOT EXISTS fastn_folder_relation
;; (
;;     id             INTEGER PRIMARY KEY,
;;     folder         INTEGER NOT NULL,
;;     parent         INTEGER NOT NULL,
;; 
;;     FOREIGN KEY (folder) REFERENCES fastn_folder (id),
;;     FOREIGN KEY (parent) REFERENCES fastn_folder (id)
;; ) STRICT;
;; 
;; 
;; \-- semantics: this table is used to store the objects in a folder
;; CREATE TABLE IF NOT EXISTS fastn_folder_object (
;;     id             INTEGER PRIMARY KEY,
;;     fid            INTEGER NOT NULL,
;;     app            TEXT NOT NULL,
;;     okind          TEXT NOT NULL,
;;     oid            INTEGER NOT NULL,
;; 
;;     FOREIGN KEY (fid) REFERENCES fastn_folder (id)
;; ) STRICT;

;; folder -> exception folder permission
;; You can attach a bunch of users and permissions to `exception_folder` but not child objects.
;; This allows you to have a `superuser` exception_folder and some users are
;; attached to this folder. And this folder is attached to `fid`
;; This way you manage super users on the `exception_folder` but apply those privileges to selected `fid`s
;; CREATE TABLE IF NOT EXISTS fastn_folder_exception_permission (
;;     id                INTEGER PRIMARY KEY,
;;     fid               INTEGER NULL,
;;     exception_folder  INTEGER NULL,
;; 
;;     FOREIGN KEY (fid) REFERENCES fastn_folder (id),
;;     FOREIGN KEY (exception_folder) REFERENCES fastn_folder (id)
;; ) STRICT;

;; folder -> exception user permission
;; exception_user is a normal `fastn_user` that has a certain `permission` on `fid` folder
;; CREATE TABLE IF NOT EXISTS fastn_user_exception_permission (
;;     id             INTEGER PRIMARY KEY,
;;     fid            INTEGER NULL,
;;     exception_user INTEGER NULL,
;;     permission     INTEGER NULL,
;; 
;;     FOREIGN KEY (fid) REFERENCES fastn_folder (id),
;;     FOREIGN KEY (exception_user) REFERENCES fastn_user (id),
;;     FOREIGN KEY (permission) REFERENCES fastn_app_permission (id)
;; ) STRICT;





;; S: Siddhant
;; A: Amit
;; N: Nandini
;; R: RG
;; X: superuser

;; folder structure
;; /{1} (X) [admin:*]
;;   /fifthtry{2} (SAN) [Blog:Read]
;;      /finance{3} ()
;;      /marketing{4} (AN) [Blog:Write]
;;         ->{8}
;;      /tech{5} (SA) [Blog:Write]
;;         ->{7}
;;      /blog{6} ()
;;          /tech-posts{7} ()
;;          /marketing{8} ()
;;   /today-has-been{8} (AR)

;; A "Blog" under /fifthtry/ (/fifthtry/**) can be read by SAN
;; A "Blog" created by A can have parent folders either /fifthtry/marketing/, /fifthtry/tech/, and, /fifthtry/marketing/blog/

;; On /blog/ page. It'll show all the blogs associated with /fifthtry/blog/

;; who can create an orphan blog?
;; -> an app can insert "blog" with no "parent" to it.
;; who can create a blog that has "parents column" set as /fifthtry/marketing/?

;; who is part of finance department: no one


\-- semantics: store explicit permissions for a user on an object
\-- this folder is only needed if we can not handle all permissions using
\-- folder permissions.
;; CREATE TABLE IF NOT EXISTS fastn_user_object_permission
;; (
;;     id             INTEGER PRIMARY KEY,
;;     uid            INTEGER NOT NULL,
;;     oid            INTEGER NOT NULL, -- not sure if this should be a integer. can't have fk anyway
;;     permission    INTEGER NOT NULL,
;; 
;;     valid_since    INTEGER NOT NULL, -- usually the time of creation
;;     valid_till     INTEGER NULL,     -- if null, permission is valid forever
;;     two_factor     INTEGER NOT NULL DEFAULT false, -- if true, user must use 2FA
;; 
;;     FOREIGN KEY (uid) REFERENCES fastn_user (id),
;;     FOREIGN KEY (permission) REFERENCES fastn_app_permission (id)
;; ) STRICT;


\-- semantics: permissions associated with a specific app. This lets you define permissions and precedence among them
;; How do we know which permission implies other perms? For example, I want to
;; assume "read" access if the user has "write" access. We traverse the the tree using `parent_permission`, a parent permission implies child perms
;; CREATE TABLE IF NOT EXISTS fastn_app_permission
;; (
;;     id                 INTEGER PRIMARY KEY,
;;     app                TEXT NOT NULL,
;;     okind              TEXT NOT NULL,
;;     permission         TEXT NOT NULL,
;;     parent_permission  INTEGER NULL,
;; 
;;     FOREIGN KEY (parent_permission) REFERENCES fastn_app_permission (id)
;; ) STRICT;

;; fastn:can_read_folder -> This will show/hide folder name/meta

;; question: how to check if a user has permission to do something?
;; 1. SQL: check if the user has a permission on that object, if yes return
;; 2. SQL: find all parent folders of the object (possible in one query?)
;; 3. for each folder, get the permission and check if the user belongs to that
;;    folder, if so done.

;; we can de-normalise user permissions for folders, eg in this folder sub tree
;; I have read permission, so we do not have to keep track of all the folders
;; below it. we can store <permission-name>: [<folder>] for user, and check if
;; any of the parents of the object is present in the list.

;; question: how to find all objects a user has specific permission for?
;; 1. SQL: for the specific permission, look into user's permission-folder cache
;;    mentioned above, find all folders in which the user has that permission.
;; 2. find all objects in those folders.



-- fastn.migration: 0001-initial-migration

;; this migration used to exist in fastn, we are moving it to lets-auth
;; https://github.com/fastn-stack/fastn/blob/899ad96/fastn-core/src/migrations/fastn_migrations.rs


CREATE TABLE IF NOT EXISTS fastn_user
(
    id           INTEGER PRIMARY KEY,
    name         TEXT,
    identity     TEXT    UNIQUE,
    data         TEXT    NOT NULL,

    created_at   INTEGER NOT NULL,
    updated_at   INTEGER NOT NULL
) STRICT;


CREATE TABLE IF NOT EXISTS fastn_session
(
    id         TEXT    NOT NULL PRIMARY KEY,
    uid        INTEGER,
    data       TEXT    NOT NULL,

    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL,
    expires_at INTEGER,

    CONSTRAINT fk_fastn_user FOREIGN KEY (uid) REFERENCES fastn_user (id)
) STRICT;
